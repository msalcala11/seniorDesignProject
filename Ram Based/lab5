/*
 * Author: Marty Alcala
 * Lab 5, Task2
 * main.c
 */

#include "F2806x_Device.h"
void SysClkInit();
void TimerInit();
void ADCInit();
void PWMInit();
void SetMotorVoltage(float32 desiredVoltage);
void InterruptInit();
void ServiceWatchdog();
interrupt void TimerIsr(void);
interrupt void AdcIsr(void);
float32 dataArrayVR1[100]; // Holds the latest 100 measurements of VR1 voltage
float32 dataArrayVR2[100]; // Holds the latest 100 measurements of VR2 voltage
Uint16 dataIndex; // The current index in dataArrayVR1 and dataArrayVR2
Uint16 measuredValueVR1; // Holds the current measurement of VR1 voltage
Uint16 measuredValueVR2; // // Holds the current measurement of VR2 voltage
Uint16 DMVal = 1000;
float32 motorVoltage = 20;
Uint16 timerCounter = 0;

void main(void) {

	// Enable write access protected registers
	EALLOW;

	// Disable the watchdog register so that we can have an
	// arbitrarily long initialization procedure
	SysCtrlRegs.WDCR = 0x0068;

	SysClkInit();
	ADCInit();
	TimerInit();
	InterruptInit();
	PWMInit();

	// Reenable the watchdog register
	SysCtrlRegs.WDCR = 0x0028;

	// Revoke write access to protected registers
	EDIS;

	// Set dataIndex to 0 - will be incremented with each ADC interrupt
	dataIndex = 0;

	// Start the timer
	CpuTimer0Regs.TCR.bit.TSS = 0;
	//SetMotorVoltage(20);
	while(1){
		ServiceWatchdog();
	}

}


void SysClkInit(){

	// Set the system clock to 90MHz

	// Check to see if divsel is either 2 or 3
	if((SysCtrlRegs.PLLSTS.bit.DIVSEL == 3) || (SysCtrlRegs.PLLSTS.bit.DIVSEL == 2)){
		// If so, set it to 0
		SysCtrlRegs.PLLSTS.bit.DIVSEL = 0;
	}

	// Disable failed oscillator detect logic
	SysCtrlRegs.PLLSTS.bit.MCLKOFF = 1;

	// Set the factor fosc is multiplied by
	SysCtrlRegs.PLLCR.bit.DIV = 9;

	//Check if SysCtrlRegs.PLLSTS.bit.PLLLOCKS is 1 (If not, wait for it to lock)
	while(SysCtrlRegs.PLLSTS.bit.PLLLOCKS != 1){
		// wait for the register to lock
	}

	// Re-enable failed oscillator detect logic
	SysCtrlRegs.PLLSTS.bit.MCLKOFF = 0;

	// Set the factor fosc is divided by (3 means divided by 1)
	SysCtrlRegs.PLLSTS.bit.DIVSEL = 3;
}

void TimerInit(){
	//	Formula: ftmr = fclk/((0+1)(PRD.all+1))

	// Set Timer frequency to 10KHz
	Uint32 systemClockFrequency = 90000000;
	Uint32 desiredFrequency = 1000;

	//	Set PRD according to the formula above
	CpuTimer0Regs.PRD.all = (systemClockFrequency/desiredFrequency) - 1;

	//  Set TPR and TPRH to 0 for simplicity so we can just worry about PRD
	CpuTimer0Regs.TPRH.bit.TDDRH = 0;
	CpuTimer0Regs.TPR.bit.TDDR = 0;

	// Stop the timer
	CpuTimer0Regs.TCR.bit.TSS = 1;

	// Load the timer with our newly set pre-scale values above
	CpuTimer0Regs.TCR.bit.TRB = 1;

	// Enable timer interrupts
	CpuTimer0Regs.TCR.bit.TIE = 1;

}

void ADCInit(){

	// Conifugre and initialize the ADC module

	//Set the ADC clock to 10MHz
	SysCtrlRegs.PCLKCR0.bit.ADCENCLK = 1; // Enable the ADC module to be clocked
	asm(" NOP");
	asm(" NOP"); // wait 2 clock cycles to let the change stabilize
	AdcRegs.ADCCTL2.bit.CLKDIV2EN = 1; // Divide the system clock by 2 (making the result 20MHz)
	AdcRegs.ADCCTL2.bit.CLKDIV4EN = 1; // Divide the system clock by 2 again (making the result 10MHz as desired)
	AdcRegs.ADCCTL2.bit.ADCNONOVERLAP = 1; // Do not allow overlap of samples

	//Power up and enable the ADC Module
	AdcRegs.ADCCTL1.bit.ADCPWDN = 1; // Power up this bad boy
	AdcRegs.ADCCTL1.bit.ADCBGPWD = 1; // Power up buffer circuitry inside the core
	AdcRegs.ADCCTL1.bit.ADCREFPWD = 1; // Power up reference buffers
	AdcRegs.ADCCTL1.bit.ADCENABLE = 1; // Enable the ADC

	// Wait for 1 ms before requesting a conversion to ensure accuracy
	Uint32 i = 0;
	for(i = 0; i < (.001*10000000); i++){
		asm(" NOP");
	}

	//Configure the conversions
	AdcRegs.ADCSOC0CTL.bit.CHSEL = 0x0; // Set the first “start of conversion” sample pin to be ADC-A0 (VR1)
	AdcRegs.ADCSOC1CTL.bit.CHSEL = 0x1; // Set the first “start of conversion” sample pin to be ADC-A0 (VR1)
	AdcRegs.ADCSOC0CTL.bit.ACQPS = 0x6; // Set sampling hold time. Since we need to wait at least 80ns to sample, at a 5MHz clock the minimum of 7 clock cycles should be more than enough to satisfy an 80ns hold time
	AdcRegs.ADCSOC0CTL.bit.TRIGSEL = 0; // Set the conversion start trigger to software only

	//CONFIGURE ADC INTERRUPTS
	AdcRegs.INTSEL1N2.bit.INT1SEL = 1; //Connect ADCINT1 to EOC1 (the least priority conversion)
	AdcRegs.INTSEL1N2.bit.INT1E = 1; //Enable ADCINT1
	AdcRegs.ADCCTL1.bit.INTPULSEPOS = 1; // Ensure INT pulse generation occurs 1 cycle prior to ADC result latching into its result register
}

void PWMInit(){

	//Initialize the PWM registers
	//Set the pin multiplexers

//	GpioCtrlRegs.GPADIR.bit.GPIO4 = 1; //Set the 0 pin to ePWM1 output A
//	GpioCtrlRegs.GPADIR.bit.GPIO5 = 1; //Set the 1 pin to ePWM1 output B




	//Enable the module clock
	SysCtrlRegs.PCLKCR1.bit.EPWM3ENCLK = 1; // Clock ePWM1
	asm(" NOP");
	asm(" NOP"); // wait 2 clock cycles to let the change stabilize
	//Configure the Time Base Clock and Counter
	EPwm3Regs.TBCTL.bit.CTRMODE = 2; // Set the count to up-down mode

	//Formula: fpwm = fclk/(2 · TBPRD)(HSPCLKDIV)(CLKDIV)
	EPwm3Regs.TBPRD = 1500; // Set fpwm to 30 kHz based on a 90MHz clock
	EPwm3Regs.TBCTL.bit.HSPCLKDIV = 0; //divide by 1
	EPwm3Regs.TBCTL.bit.CLKDIV = 0; // divide by 1

	//Set the Output Actions
	EPwm3Regs.AQCTLA.bit.CAU = 1; //Set APWMA to low when the counter equals the active CMPA register and the counter is incrementing.
	EPwm3Regs.AQCTLA.bit.CAD = 2; //Set APWMA to high when the time-base counter equals the active CMPA register and the counter is decrementing.
	EPwm3Regs.AQCTLB.bit.CAU = 2; //Set APWMB to high when the counter equals the active CMPB register and the counter is incrementing.
	EPwm3Regs.AQCTLB.bit.CAD = 1; //Set APWMB to low when the time-base counter equals the active CMPB register and the counter is decrementing.

	//Set the Event Triggers
//	EPwm1Regs.ETSEL.bit.SOCySEL = ; // These bits determine when a EPWMxSOCA pulse will be generated.
//	EPwm1Regs.ETSEL.bit.SOCAEN = 1; //Enable EPWM1SOCA pulse
//	EPwm1Regs.ETPS.bit.SOCyPRD  = ; //These bits determine how many selected ETSEL[SOCASEL] events need to occur before an EPWMxSOCA pulse is generated. To be generated, the pulse must be enabled (ETSEL[SOCAEN] = 1). The SOCA pulse will be generated even if the status flag is set from a previous start of conversion (ETFLG[SOCA] = 1). Once the SOCA pulse is generated, the ETPS[SOCACNT] bits will automatically be cleared.

	//Enable the Time Base Clock
	SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 1;
	asm(" NOP");
	asm(" NOP"); // wait 2 clock cycles to let the change stabilize

	//Utilize the PWM Pins
	//Map and Set the Duty Cycle
	EPwm3Regs.CMPA.half.CMPA = 1000; // Compare A = 350 TBCLK counts
	//EPwm1Regs.CMPB = 200; // Compare B = 200 TBCLK counts

	GpioCtrlRegs.GPAMUX1.bit.GPIO4 = 1; //Set the 0 pin to ePWM1 output A
	GpioCtrlRegs.GPAMUX1.bit.GPIO5 = 1; //Set the 1 pin to ePWM1 output B

	GpioCtrlRegs.GPBMUX1.bit.GPIO32 = 0;
	GpioCtrlRegs.GPBDIR.bit.GPIO32 = 1; //Set the 0 pin to ePWM1 output A
	GpioDataRegs.GPBSET.bit.GPIO32 = 1; //Set the 1 pin to ePWM1 output B

}

void InterruptInit(){

	// CONFIGURE TIMER INTERRUPTS
	// Enable fetching from the PIE vector table
	PieCtrlRegs.PIECTRL.bit.ENPIE = 1;

	// Load our defined interrupt routine into the PIE Vect Table
	PieVectTable.TINT0 = &TimerIsr;

	// Enable interrupts to be triggered by CPU Timer 0 (row 1, col 7 of thie pie vector table)
	PieCtrlRegs.PIEIER1.bit.INTx7 = 1;

	// Enable Interrupts at the CPU Level:
	// Enables level INT1 at the CPU level, disables all other levels - (INT1 contains CPU Timer 0)
	IER = 0x0001;

	// Enable cpu interrupts
	EINT;

	// CONFIGURE ADC INTERRUPTS

	// Register the ISR that will run after we are notified of the conversion completion in the PieVect table
	PieVectTable.ADCINT1 = &AdcIsr;

	// Enable the ADC interrupt at the pie level
	PieCtrlRegs.PIEIER1.bit.INTx1 = 1;
}

interrupt void TimerIsr(void){

	if(timerCounter == 0) motorVoltage = 20;//SetMotorVoltage(20);
	else if(timerCounter == 200) motorVoltage = 0;//SetMotorVoltage(0);
	else if(timerCounter == 400) motorVoltage = -20;//SetMotorVoltage(-20);
	else if(timerCounter == 600) motorVoltage = 0;//SetMotorVoltage(0);
	else if(timerCounter == 800){
		motorVoltage = 20;
		timerCounter = 0;
	}
	SetMotorVoltage(motorVoltage);

	timerCounter++;

	// Request new conversion for both VR voltages
	AdcRegs.ADCSOCFRC1.bit.SOC0 = 1; // Request a conversion on SOC0
	AdcRegs.ADCSOCFRC1.bit.SOC1 = 1; // Request a conversion on SOC1

	// Acknowledge Interrupt
	PieCtrlRegs.PIEACK.bit.ACK1 = 1;
}

interrupt void AdcIsr(void){

	// Recieve new conversion

	// Read the integer value of the conversion of SOC0 and SOC1
	measuredValueVR1 = AdcResult.ADCRESULT0;
	measuredValueVR2 = AdcResult.ADCRESULT1;

	// If we have not already filled up the arrays add data point to the next index
	if(dataIndex<=99)
	{
		dataArrayVR1[dataIndex] = (3.3/(4096))*measuredValueVR1;
		dataArrayVR2[dataIndex] = (3.3/(4096))*measuredValueVR2;
		dataIndex++;
	}

	// Left shift the arrays if we have already filled it up with data
	if(dataIndex > 99)
	{
		Uint32 k;
		for(k=1;k<=100;k++) {
				dataArrayVR1[k-1] = dataArrayVR1[k];
				dataArrayVR2[k-1] = dataArrayVR2[k];
		}

		dataArrayVR1[99] = (3.3/(4096))*measuredValueVR1;
		dataArrayVR2[99] = (3.3/(4096))*measuredValueVR2;
	}

	// Clear ADCINT1 to show we have read the result
	AdcRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;

	// Acknowledge Interrupt
	PieCtrlRegs.PIEACK.bit.ACK1 = 1;
}

void SetMotorVoltage(float32 desiredVoltage) {
	Uint16 TPRD = 1500;
	Uint16 Vdc = 24;
	Uint16 requiredCompareValue = .5*TPRD*(1 + desiredVoltage/Vdc);
	EPwm3Regs.CMPA.half.CMPA = requiredCompareValue;
}


void ServiceWatchdog(){

	EALLOW;
	SysCtrlRegs.WDKEY = 0x55;
	SysCtrlRegs.WDKEY = 0xAA;
	EDIS;

}
